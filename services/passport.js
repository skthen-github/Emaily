const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");

// one arg in mongoose.model means we are trying to fetch a model from mongoose
const User = mongoose.model("users");

passport.serializeUser((user, done) => {
  // user.id refer to the collection id generated by mongo
  // _id:5fc3a4864e5dc10af89edde4
  // googleId:"106761574932474166192"
  // __v:0
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleId: profile.id }).then((existingUser) => {
        if (existingUser) {
          // we already have a record with the profile ID
          // for done() function; 1st arg is error object, 2nd arg is the user record
          done(null, existingUser);
        } else {
          // we don't have a user record with this ID, make a new record
          // profile {
          //  id: '106761574932474166192',
          //  displayName: 'Jason Chen',
          //  ...
          new User({ googleId: profile.id })
            .save()
            // the user below is a second instance(from DB),
            // whereas the first instance was created
            // in the line new User({ googleId: profile.id }) above
            .then((user) => done(null, user));
        }
      });
    }
  )
);
